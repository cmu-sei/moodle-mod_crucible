./index.php:    $cm = $modinfo->cms[$crucible->coursemodule];
./index.php:        if ($crucible->section !== $currentsection) {
./index.php:            if ($crucible->section) {
./index.php:                $printsection = get_section_name($course, $crucible->section);
./index.php:            $currentsection = $crucible->section;
./index.php:        $printsection = '<span class="smallinfo">'.userdate($crucible->timemodified)."</span>";
./index.php:    $class = $crucible->visible ? '' : 'class="dimmed"'; // hidden modules are dimmed
./index.php:        "<a $class $extra href=\"view.php?id=$cm->id\">".$icon.format_string($crucible->name)."</a>",
./amd/build/view.min.js:define(["jquery"],function(a){function b(){k?(console.log("event id "+k),a.ajax({url:m+"/implementations/"+k,type:"GET",contentType:"application/json",dataType:"json",beforeSend:function(a){a.setRequestHeader("Authorization","Bearer "+i)},success:function(b){a.each(b,function(a,b){"exerciseId"==a&&b&&(l=b,console.log("exercise_id "+l)),"status"==a&&(console.log("status "+j),"Active"==b&&(clearTimeout(h),"Active"!=j&&"Active"==b&&(console.log("reloading"),window.location.replace(window.location.href))),"Creating"!=b&&"Planning"!=b&&"Applying"!=b&&"Ending"!=b||c(),"Ended"==b&&window.location.replace(window.location.href),"Failed"==b&&(e(),clearTimeout(h)),j=b),"sessionid"==a&&console.log("session id "+b)})},error:function(a){"401"==a.status&&(console.log("permission error, check token"),clearTimeout(h),window.location.replace(window.location.href))}})):d()}function c(){var a=document.getElementById("launch_button");a.style.display="none";var a=document.getElementById("end_button");a.style.display="none";var a=document.getElementById("wait");a.style.display="block";var a=document.getElementById("vm_or_link");a.style.display="none";var a=document.getElementById("failed");a.style.display="none";var a=document.getElementById("crucible-container");a.style.display="none";var a=document.getElementById("enable-fullscreen");a.style.display="none"}function d(){var a=document.getElementById("launch_button");a.style.display="block";var a=document.getElementById("end_button");a.style.display="none";var a=document.getElementById("wait");a.style.display="none";var a=document.getElementById("vm_or_link");a.style.display="none";var a=document.getElementById("failed");a.style.display="none";var a=document.getElementById("timerdiv");a&&(a.style.display="none");var a=document.getElementById("crucible-container");a.style.display="none";var a=document.getElementById("enable-fullscreen");a.style.display="none"}function e(){var a=document.getElementById("launch_button");a.style.display="none";var a=document.getElementById("end_button");a.style.display="none";var a=document.getElementById("wait");a.style.display="none";var a=document.getElementById("vm_or_link");a.style.display="none";var a=document.getElementById("failed");a.style.display="block";var a=document.getElementById("crucible-container");a.style.display="none";var a=document.getElementById("enable-fullscreen");a.style.display="none"}function f(){var a=document.getElementById("launch_button");a.style.display="none";var a=document.getElementById("end_button");a.style.display="block";var a=document.getElementById("event");a.style.value=k;var a=document.getElementById("wait");a.style.display="none";var a=document.getElementById("failed");a.style.display="none";var a=document.getElementById("vm_or_link");null!==a.getAttribute("src")&&a.setAttribute("src",n+"/exercises/"+l),a.getAttribute("href")&&a.setAttribute("href",o+"/exercise-player/"+l),a.style.display="block";var a=document.getElementById("timerdiv");a&&(a.style.display="block");var a=document.getElementById("crucible-container");a.style.display="block";var a=document.getElementById("enable-fullscreen");a.style.display="inline-block"}function g(){h=setTimeout(function(){b(),g(),"Ended"==j&&console.log("lab has ended")},5e3)}var h,i,j,k,l,m,n,o;return{init:function(a){i=a.token,j=a.state,k=a.event,l=a.exercise,m=a.alloy_api_url,n=a.vm_app_url,o=a.player_app_url,"Active"==j?f():""==j?d():c();var b=document.getElementById("enable-fullscreen");b&&(b.onclick=function(){var a=document.getElementById("vm_or_link");a.requestFullscreen()}),g()}}});
./amd/build/tasks.min.js:define(["jquery","core/config","core/log"],function(a,b,c){function d(){a.ajax({url:b.wwwroot+"/mod/crucible/getresults.php",dataType:"json",type:"POST",data:{sesskey:b.sesskey,time:a.now(),id:f},headers:{"Cache-Control":"no-cache",Expires:"-1"},success:function(b){console.log(b),b.parsed.sort(function(a,b){return a.statusDate>b.statusDate?1:-1}),a.each(b.parsed,function(a,b){var c=document.getElementById("result-"+b.dispatchTaskId);c&&(c.innerHTML=b.status)})},error:function(a){console.log("error"),console.log(a),clearTimeout(g)}})}function e(d){console.log("exec task for "+d),a.ajax({url:b.wwwroot+"/mod/crucible/runtask.php",dataType:"json",type:"POST",data:{sesskey:b.sesskey,time:a.now(),id:d},headers:{"Cache-Control":"no-cache",Expires:"-1"},success:function(a){console.log(a)},error:function(a){console.log("crucible task failed"),console.log(a),c.debug("moodle-mod_crucible-runtask: ".request)}})}var f,g;return{init:function(b){console.log("session id "+b.session),f=b.session,d(),g=setInterval(function(){d()},5e3);var c=document.getElementsByClassName("exec-task");a.each(c,function(a,b){var c=b.id,d=document.getElementById(c);d&&"Run Task"===d.innerHTML&&(d.onclick=function(){e(c)},console.log("set event for button "+c))})}}});
./amd/build/keepalive.min.js:define(["jquery","core/config","core/log"],function(a,b,c){"use strict";function d(){a.ajax({url:b.wwwroot+"/mod/crucible/session_keepalive.php",dataType:"json",type:"POST",data:{sesskey:b.sesskey,time:a.now()},headers:{"Cache-Control":"no-cache",Expires:"-1"},success:function(){},error:function(a){console.log("crucible keepalive failed"),c.debug("moodle-mod_crucible-keepalive: ".request),403==a.status&&clearInterval(e)}})}var e=null;return{init:function(a){null!==a.keepaliveinterval&&a.keepaliveinterval>0&&(e=setInterval(d,1e3*a.keepaliveinterval*60))}}});
./amd/src/tasks.js:                log.debug('moodle-mod_crucible-runtask: ' . request);
./amd/src/keepalive.js:                log.debug('moodle-mod_crucible-keepalive: ' . request);
./amd/src/view.js:        var x = document.getElementById('crucible-container');
./amd/src/view.js:        var x = document.getElementById('crucible-container');
./amd/src/view.js:        var x = document.getElementById('crucible-container');
./amd/src/view.js:        var x = document.getElementById('crucible-container');
./templates/embed.mustache:<div id="crucible-container">
./classes/utils/grade.php:                array($userid, $crucible->id), 'grade');
./classes/utils/grade.php:	debugging("user $userid has " . count($grades) . " grades for $crucible->id", DEBUG_DEVELOPER);
./classes/utils/grade.php:        $attempts = $this->crucible->getall_attempts('closed');
./classes/utils/grade.php:	debugging("new grade for $attempt->userid in $this->crucible->id is $grade", DEBUG_DEVELOPER);
./classes/utils/grade.php:        $updated = crucible_update_grades($this->crucible->crucible, $attempt->userid, $grade);
./classes/utils/grade.php:        if ($this->crucible->openAttempt->sessionid) {
./classes/utils/grade.php:            //$tasks = filter_tasks(get_sessiontasks($this->crucible->systemauth, $this->crucible->openAttempt->sessionid));
./classes/utils/grade.php:            //$taskresults = get_taskresults($this->crucible->systemauth, $this->crucible->openAttempt->sessionid);
./classes/utils/grade.php:            $tasks = filter_tasks(get_sessiontasks($this->crucible->system, $this->crucible->openAttempt->sessionid));
./classes/utils/grade.php:            $taskresults = get_taskresults($this->crucible->system, $this->crucible->openAttempt->sessionid);
./classes/utils/grade.php:	$scaledpoints = ($totalslotpoints / $totalpoints) *  $this->crucible->crucible->grade;
./classes/utils/grade.php:        $gradetopass = $DB->get_field('grade_items', 'gradepass', array('iteminstance' => $this->crucible->crucible->id, 'itemmodule' => 'crucible'));
./classes/utils/grade.php:	debugging("grade method is $this->crucible->crucible->grademethod for $this->crucible->crucible->id", DEBUG_DEVELOPER);
./classes/utils/grade.php:        switch ($this->crucible->crucible->grademethod) {
./classes/utils/grade.php:            if ($usergrade = $DB->get_record('crucible_grades', array('userid' => $userid, 'crucibleid' => $this->crucible->crucible->id))) {
./classes/utils/grade.php:                $usergrade->crucibleid = $this->crucible->crucible->id;
./classes/utils/grade.php:	    debugging("persisted $grade for $userid in $this->crucible->crucible->id", DEBUG_DEVELOPER);
./classes/crucible.php:        $url = get_config('crucible', 'alloyapiurl') . "/definitions/" . $this->crucible->eventtemplateid . "/implementations/mine";
./classes/crucible.php:        $sqlparams[] = $this->crucible->id;
./classes/crucible.php:        $attempt->crucibleid = $this->crucible->id;
./renderer.php:        $data->name = $crucible->name;
./renderer.php:        $data->intro = $crucible->intro;
./lib.php:    $cmid = $crucible->coursemodule;
./lib.php:    $crucible->created = time();
./lib.php:    $crucible->grade = 100; //default
./lib.php:    $crucible->id = $DB->insert_record('crucible', $crucible);
./lib.php:    return $crucible->id;
./lib.php:    $oldcrucible = $DB->get_record('crucible', array('id' => $crucible->instance));
./lib.php:    $crucible->grade = $oldcrucible->grade;
./lib.php:    $crucible->id = $crucible->instance;
./lib.php:    $cmid = $crucible->coursemodule;
./lib.php:    $DB->set_field('course_modules', 'instance', $crucible->id, array('id'=>$cmid));
./lib.php:    $crucible->timemodified = time();
./lib.php:    $events = $DB->get_records('event', array('modulename' => 'crucible', 'instance' => $crucible->id));
./lib.php:    $DB->delete_records('crucible', array('id'=>$crucible->id));
./lib.php:        'objectid' => $crucible->id
./lib.php:    if ($crucible->grade == 0) {
./lib.php:        $params = array('itemname' => $crucible->name, 'idnumber' => $crucible->cmidnumber);
./lib.php:        $params = array('itemname' => $crucible->name);
./lib.php:    if ($crucible->grade > 0) {
./lib.php:        $params['grademax']  = $crucible->grade;
./lib.php:    return grade_update('mod/crucible', $crucible->course, 'mod', 'crucible', $crucible->id, 0, $grades, $params);
./lib.php:    return grade_update('mod/crucible', $crucible->course, 'mod', 'crucible', $crucible->id, 0,
./lib.php:    $params = array($crucible->id);
./view.php:        $course     = $DB->get_record('course', array('id' => $crucible->course), '*', MUST_EXIST);
./view.php:        $cm         = get_coursemodule_from_instance('crucible', $crucible->id, $course->id, false, MUST_EXIST);
./view.php:$PAGE->set_title(format_string($crucible->name));
./view.php:$object->eventtemplate = get_eventtemplate($object->systemauth, $crucible->eventtemplateid);
./view.php:    $crucible->name = $object->eventtemplate->name;
./view.php:    $crucible->intro = $object->eventtemplate->description;
./view.php:    //rebuild_course_cache($crucible->course);
./view.php:        $eventid = start_event($object->systemauth, $object->crucible->eventtemplateid);
./view.php:$vmapp = $crucible->vmapp;
./view.php:$renderer->display_form($url, $object->crucible->eventtemplateid);
./view.php:    if ($crucible->clock == 1) {
./view.php:    } else if ($crucible->clock == 2) {
./backup/moodle2/backup_crucible_stepslib.php:        $crucible->set_source_table('crucible', array('id' => backup::VAR_ACTIVITYID));
./backup/moodle2/backup_crucible_stepslib.php:        $crucible->annotate_files('mod_crucible', 'intro', null); // This file area hasn't itemid
